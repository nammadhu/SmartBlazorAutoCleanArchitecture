@page "/cardtypes"
@using SHARED.Features.CardTypes.Commands
@inject ITownCardTypeController TownCardTypeService
@inject AuthenticationStateProvider AuthProvider

<h3>Card Types</h3>

<FluentDataGrid Items="@paginatedCardTypes.AsQueryable()" TGridItem="CardTypeDto" SelectionMode="Single" Style="height: auto; max-width: 100%;">
    <PropertyColumn Property="@(c => c.Id)" Title="ID" Sortable="true" />
    <PropertyColumn Property="@(c => c.Name)" Title="Name" Sortable="true" />
    <PropertyColumn Property="@(c => c.IconColor)" Title="Icon Color" Sortable="true" />
    <PropertyColumn Property="@(c => c.Price)" Title="Price" Sortable="true" />
    <TemplateColumn Title="Actions">
        <div>
            <FluentButton Title="Edit" OnClick="() => EditCardType(context)" Disabled="@(!CanEdit)" />
            <FluentButton Title="Delete" OnClick="() => DeleteCardType(context)" Disabled="@(!CanDelete)" />
        </div>
    </TemplateColumn>
</FluentDataGrid>

<div class="pagination-container">
    <FluentButton Title="Previous" OnClick="GoToPreviousPage" Disabled="@isFirstPage" />
    <span>Page @currentPage of @totalPages</span>
    <FluentButton Title="Next" OnClick="GoToNextPage" Disabled="@isLastPage" />
</div>

@if (CanCreate)
    {
    <FluentButton Title="Create New" OnClick="@CreateNew" Style="margin-top: 10px;" />
    }

<style>
    @@media (max-width: 600px) {
        fluent-data-grid {
            width: 100%;
            font-size: 14px;
        }

        fluent-button {
            font-size: 12px;
            margin: 5px 0;
        }

        .pagination-container {
            text-align: center;
            margin-top: 10px;
        }

            .pagination-container span {
                margin: 0 10px;
            }
    }
</style>

@code {
    private List<CardTypeDto> cardTypes = new();
    private List<CardTypeDto> paginatedCardTypes => cardTypes
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    private int currentPage = 1;
    private int pageSize = 3; // Items per page
    private int totalPages => (int)Math.Ceiling(cardTypes.Count / (double)pageSize);
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage == totalPages;

    private bool CanEdit => RolePermissions.CanEdit(GetUserRole());
    private bool CanCreate => RolePermissions.CanCreate(GetUserRole());
    private bool CanDelete => RolePermissions.CanDelete(GetUserRole());

    protected override async Task OnInitializedAsync()
        {
        await LoadCardTypesAsync();
        }

    private async Task LoadCardTypesAsync()
        {
        var result = await TownCardTypeService.GetAll();
        if (result.Success)
            {
            cardTypes = result.Data;
            }
        }

    private async Task EditCardType(CardTypeDto cardType)
        {
        await TownCardTypeService.Update(new CU_CardTypeCommand
                {
                Id = cardType.Id,
                Name = cardType.Name,
                IconColor = cardType.IconColor,
                Price = cardType.Price
                });
        await LoadCardTypesAsync();
        }

    private async Task DeleteCardType(CardTypeDto cardType)
        {
        await TownCardTypeService.Delete(cardType.Id);
        await LoadCardTypesAsync();
        }

    private async Task CreateNew()
        {
        var newCardType = new CU_CardTypeCommand
                {
                Name = "New Card",
                IconColor = "#0000FF",
                Price = 300
                };
        await TownCardTypeService.Create(newCardType);
        await LoadCardTypesAsync();
        }

    private void GoToPreviousPage()
        {
        if (currentPage > 1)
            {
            currentPage--;
            }
        }

    private void GoToNextPage()
        {
        if (currentPage < totalPages)
            {
            currentPage++;
            }
        }

    private string GetUserRole()
        {
        var authState = AuthProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        return user.IsInRole("Admin") ? "Admin" : "User";
        }

    public static class RolePermissions
        {
        public static bool CanEdit(string role) => role == "Admin" || role == "Editor";
        public static bool CanCreate(string role) => role == "Admin";
        public static bool CanDelete(string role) => role == "Admin";
        }
}
