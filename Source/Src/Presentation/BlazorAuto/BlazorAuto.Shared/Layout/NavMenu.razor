@implements IDisposable
@using BASE
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
@inject IFormFactor FormFactor
<div class="navmenu">
	<input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
	<label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
	<nav class="sitenav" aria-labelledby="main-menu">
		<FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
			<FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
			<FluentNavLink Href="counter" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Counter</FluentNavLink>
			<FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())" IconColor="Color.Accent">Weather</FluentNavLink>
			<FluentNavLink Href="CardTypes" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())" IconColor="Color.Accent">Card Types</FluentNavLink>
			@if (FormFactor.GetFormFactor() == CONSTANTS.WebAssembly)
				{
				<FluentNavLink Href="sync" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Cache Offline</FluentNavLink>
				<FluentNavLink Href="chat" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())" IconColor="Color.Accent">Chat SignalR</FluentNavLink>
				
				}
			<FluentNavLink Href="auth" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Auth Required</FluentNavLink>
			<AuthorizeView>
			<Authorized>
					<FluentNavLink Href="Account/Manage" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">@context.User.Identity?.Name</FluentNavLink>
					<div class="nav-item px-3">
						<form action="Account/Logout" method="post">
							<AntiforgeryToken />
							<input type="hidden" name="ReturnUrl" value="@currentUrl" />
							<button type="submit" class="nav-link">
								<span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
							</button>
						</form>
					</div>
	</Authorized>
			<NotAuthorized>
					<FluentNavLink Href="Account/Register" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Register</FluentNavLink>
					<FluentNavLink Href="Account/Login" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Login</FluentNavLink>
				</NotAuthorized>
			</AuthorizeView>
		</FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
	private string? currentUrl;

	protected override void OnInitialized()
		{
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		NavigationManager.LocationChanged += OnLocationChanged;
		}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
		{
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		StateHasChanged();
		}

	public void Dispose()
		{
		NavigationManager.LocationChanged -= OnLocationChanged;
		}
	}

