using PublicCommon;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace CleanArchitecture.Domain;

public class CardData : _SocialConnections, IEquatable<CardData>
{
    [Key]
    public override int Id { get; set; }

    [NotMapped]
    public int IdTown { get; set; }//this is for edit dialog purpose

    [NotMapped]
    public bool? IsVerified { get; set; }//this is for edit dialog purpose

    //here Id is cardId only ,not autogenerated

    //below are non sensitive information

    public DateTime? EndDateToShow { get; set; }//after this date content will be removed on screen
                                                //public byte? PriorityOrder { get; set; }

    [MaxLength(150, ErrorMessage = "Short Note must be less than 150 characters.")]
    public string? ShortNote { get; set; }

    //[MaxLength(1000, ErrorMessage = "Description must be less than 1000 characters.")]
    //public string? DetailedDescription { get; set; }

    public string? GoogleCustomerId { get; set; }

    public bool IsGoogleVerified { get; set; }
    public float GoogleScoreRating { get; set; }

    [JsonIgnore]
    public virtual Card? iCard { get; set; }

    public bool Equals(CardData? otherCardData)//compares including id
    {//usage bool isEqual1 = person1.Equals(person2);
        if (otherCardData == null) return false; // Not the same type

        return Equals(this, otherCardData);
    }

    public static bool Equals(CardData? source, CardData? other)//compares including id
    {//usage bool isEqual1 = person1.Equals(person2);
        if (source == null && other == null) return true; // Not the same type
        if (source == null || other == null) return false;

        return source.Id == other.Id &&  // Compare properties
        StringExtensions.Equals(source.MobileNumber, other.MobileNumber) &&
        StringExtensions.Equals(source.Email, other.Email) &&
        StringExtensions.Equals(source.GoogleMapAddressUrl, other.GoogleMapAddressUrl) &&
        StringExtensions.Equals(source.GoogleProfileUrl, other.GoogleProfileUrl) &&
        StringExtensions.Equals(source.FaceBookUrl, other.FaceBookUrl) &&
        StringExtensions.Equals(source.YouTubeUrl, other.YouTubeUrl) &&
        StringExtensions.Equals(source.InstagramUrl, other.InstagramUrl) &&
        StringExtensions.Equals(source.TwitterUrl, other.TwitterUrl) &&
        StringExtensions.Equals(source.OtherReferenceUrl, other.OtherReferenceUrl) &&
        StringExtensions.Equals(source.ShortNote, other.ShortNote);
        // && StringExtensions.Equals(source.DetailedDescription, otherCardData.DetailedDescription);
    }

    public static (bool updateRequired, bool addRequired) UpdateExistingDbEntity(CardData? existingEntity, CardData? newUiModifiedEntity)
    {
        if ((existingEntity == null && newUiModifiedEntity == null) || newUiModifiedEntity == null ||
            (existingEntity != null && existingEntity.Equals(newUiModifiedEntity)))
            return (updateRequired: false, addRequired: false);
        if (existingEntity == null)
        {
            existingEntity ??= newUiModifiedEntity;//existing null so overwrite
            return (updateRequired: false, addRequired: true);//required to Add
        }
        else
        {
            existingEntity.EndDateToShow = newUiModifiedEntity.EndDateToShow;
            existingEntity.ShortNote = newUiModifiedEntity.ShortNote;
            existingEntity.MobileNumber = newUiModifiedEntity.MobileNumber;
            existingEntity.Email = newUiModifiedEntity.Email;
            existingEntity.GoogleMapAddressUrl = newUiModifiedEntity.GoogleMapAddressUrl;
            existingEntity.GoogleProfileUrl = newUiModifiedEntity.GoogleProfileUrl;
            existingEntity.FaceBookUrl = newUiModifiedEntity.FaceBookUrl;

            existingEntity.YouTubeUrl = newUiModifiedEntity.YouTubeUrl;
            existingEntity.InstagramUrl = newUiModifiedEntity.InstagramUrl;
            existingEntity.TwitterUrl = newUiModifiedEntity.TwitterUrl;
            existingEntity.OtherReferenceUrl = newUiModifiedEntity.OtherReferenceUrl;
            return (updateRequired: true, addRequired: false);
        }
    }
}