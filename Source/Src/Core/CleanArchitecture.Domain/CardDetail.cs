using PublicCommon;
using System.ComponentModel.DataAnnotations.Schema;

namespace CleanArchitecture.Domain;

public class CardDetail : AuditableBaseEntity, IEquatable<CardDetail>
    {
    [Key]
    public override int Id { get; set; } //here Id is cardId only ,not autogenerated

    [NotMapped]
    public int IdTown { get; set; }//this is for edit dialog purpose

    [NotMapped]
    public bool? IsVerified { get; set; }//this is for edit dialog purpose

    public bool? IsOpenNow { get; set; }//true is open,false is closed

    //lets go with simple instead of json,if needed will take later
    public string? TimingsToday { get; set; }//if not set will take from TimingsUsualJson of today

    //lets go with simple instead of json,if needed will take later
    public string? TimingsUsual { get; set; }//usual working with holiday popup

    //in json
    public string? Queue { get; set; } //json of List<QueueItem>

    public string? DetailDescription { get; set; }

    public string? Image1 { get; set; }

    public string? Image2 { get; set; }

    public string? Image3 { get; set; }

    public string? Image4 { get; set; }

    public string? Image5 { get; set; }

    public string? Image6 { get; set; }

    public string? MoreImages { get; set; }//json format
    //"storageaccounc.om/1.jpg,storageaccounc.om/2.png,storageaccounc.om/3.jpeg,google.com/4.jpeg"

    [Display(Name = "YouTube Video Link")]
    public string? YouTubeVideoLink { get; set; }

    [Display(Name = "External Image Link")]
    public string? ExternalImageLink { get; set; }

    public static bool IsNotImageUrls(CardDetail? details) => (details == null ||
        (!ImageInfoBase64Url.IsUrl(details.Image1) && !ImageInfoBase64Url.IsUrl(details.Image2)
        && !ImageInfoBase64Url.IsUrl(details.Image3) && !ImageInfoBase64Url.IsUrl(details.Image4)
        && !ImageInfoBase64Url.IsUrl(details.Image5) && !ImageInfoBase64Url.IsUrl(details.Image6)));

    public void ResetImages()
        {
        Image1 = null;
        Image2 = null;
        Image3 = null;
        Image4 = null;
        Image5 = null;
        Image6 = null;
        }

    //IEquatable<CardProduct> implementation
    public bool Equals(CardDetail? otherDetails)//compares including id
        {//usage bool isEqual1 = person1.Equals(person2);
        if (otherDetails == null) return false; // Not the same type
        return Equals(this, otherDetails);
        }

    public static bool Equals(CardDetail? source, CardDetail? otherDetails)//compares including id
        {//usage bool isEqual1 = person1.Equals(person2);
        if (source == null && otherDetails == null) return true; // Not the same type
        if (source == null || otherDetails == null) return false;

        return source.Id == otherDetails.Id && EqualImages(source, otherDetails)
            && source.DetailDescription == otherDetails.DetailDescription
            && source.TimingsToday == otherDetails.TimingsToday
            && source.TimingsUsual == otherDetails.TimingsUsual;
        //&& source.Queue == otherDetails.Queue
        }

    public static bool EqualImages(CardDetail source, CardDetail? otherDetails)//compares without id
        {//usage bool isEqual1 = person1.EqualImages(person2);
        if (otherDetails == null) return false; // Not the same type

        //IdCardBrand == otherCard.IdCardBrand //here wont check for id
        return
            StringExtensions.Equals(source.Image1, otherDetails.Image1) &&
            StringExtensions.Equals(source.Image2, otherDetails.Image2) &&
            StringExtensions.Equals(source.Image3, otherDetails.Image3) &&
            StringExtensions.Equals(source.Image4, otherDetails.Image4) &&
            StringExtensions.Equals(source.Image5, otherDetails.Image5) &&
            StringExtensions.Equals(source.Image6, otherDetails.Image6) &&
            StringExtensions.Equals(source.MoreImages, otherDetails.MoreImages);
        }

    //[JsonIgnore]
    ////[ForeignKey(nameof(IdCard))]
    public virtual Card? iCard { get; set; }
    }